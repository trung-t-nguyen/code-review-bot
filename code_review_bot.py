import os
import sys
import boto3
import requests
import json

def read_diff_file(file_path):
    try:
        with open(file_path, 'r') as file:
            return file.read()
    except FileNotFoundError:
        print(f"Error: Diff file not found at {file_path}")
        sys.exit(1)
    except Exception as e:
        print(f"Error reading diff file: {str(e)}")
        sys.exit(1)

def main():
    # Get command line arguments
    diff_file_path = sys.argv[1]
    pr_number = sys.argv[2]
    repository = sys.argv[3]

     # Read the diff content from file
    diff_content = read_diff_file(diff_file_path)

    # 1. Initialize AWS Bedrock client
    bedrock = boto3.client(
        service_name='bedrock-runtime',
        region_name='us-east-1'  # Change to your preferred region
    )

    # 2. Construct the prompt with correct Claude format
    prompt_message = {
        "prompt": f"\n\nHuman: You are an expert software engineer conducting a thorough code review. Please analyze the following code diff and provide detailed, constructive feedback.\n\n" +
                 "Focus your analysis on:\n" +
                 "1. Code quality and best practices\n" +
                 "2. Potential bugs or security issues\n" +
                 "3. Performance considerations\n" +
                 "4. Maintainability and readability\n" +
                 "5. Suggestions for improvements with specific examples\n\n" +
                 f"Here's the code diff to review:\n\n{diff_content}\n\n" +
                 "Assistant: I'll provide a detailed code review addressing each of the points above.\n\n",
        "max_tokens_to_sample": 2000,
        "temperature": 0.7,
        "anthropic_version": "bedrock-2023-05-31",
        "top_p": 1,
        "stop_sequences": ["\n\nHuman:"]
    }

    try:
        # 3. Call AWS Bedrock API
        response = bedrock.invoke_model(
            modelId='anthropic.claude-v2',
            body=json.dumps(prompt_message)
        )

        # 4. Parse the response
        response_body = json.loads(response['body'].read().decode('utf-8'))
        print("Response from Bedrock:")
        print(json.dumps(response_body, indent=2))
        

        # Extract the content from the response
        if 'content' in response_body:
            review_texts = [item['text'] for item in response_body['content'] 
                          if item['type'] == 'text']
            review_comment = '\n'.join(review_texts)
        else:
            review_comment = response_body.get('completion', '')

        print("Review comment generated by Bedrock:")
        print(review_comment)
        print("Posting review comment to GitHub PR...")

        # 5. Post comment to GitHub PR
        github_token = os.environ.get('GITHUB_TOKEN')
        if not github_token:
            raise ValueError("GITHUB_TOKEN environment variable is not set")

        api_url = f"https://api.github.com/repos/{repository}/issues/{pr_number}/comments"
        
        headers = {
            "Authorization": f"token {github_token}",
            "Accept": "application/vnd.github.v3+json"
        }
        
        data = {
            "body": review_comment
        }

        response = requests.post(api_url, headers=headers, json=data)
        response.raise_for_status()

        print("Code review comment posted successfully!")

    except Exception as e:
        print(f"Error occurred: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
